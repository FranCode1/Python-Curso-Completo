# ----------------------------------------
# CLASE 13: CLOSURES Y FUNCIONES COMO OBJETOS
# ----------------------------------------

# En Python, las funciones son objetos.
# Eso significa que pueden:
# - Ser asignadas a variables
# - Pasarse como argumentos
# - Retornarse desde otras funciones
# - Tener propiedades propias


# ==========================
# üîπ FUNCIONES COMO OBJETOS
# ==========================

def saludar():
    print("¬°Hola!")

# Asignar a otra variable
otra = saludar
otra()  # ¬°Hola!

# Pasar como par√°metro
def ejecutar(funcion):
    print("Ejecutando funci√≥n...")
    funcion()

ejecutar(saludar)


# ==========================
# üîπ FUNCIONES DENTRO DE FUNCIONES
# ==========================

def operacion(mensaje):
    def imprimir():
        print(mensaje)
    imprimir()

operacion("Esto est√° dentro de otra funci√≥n")


# ==========================
# üîπ CLOSURES (Cierre)
# ==========================

# Un closure es una funci√≥n que "recuerda" el entorno donde fue creada.

def crear_multiplicador(factor):
    def multiplicar(numero):
        return numero * factor
    return multiplicar  # devuelve la funci√≥n

por_dos = crear_multiplicador(2)
por_tres = crear_multiplicador(3)

print(por_dos(5))   # 10
print(por_tres(5))  # 15

# ‚úîÔ∏è La funci√≥n `multiplicar` recuerda el valor de `factor` aunque la funci√≥n externa ya termin√≥


# ==========================
# üîπ FUNCIONES CON ESTADO (sin usar clases)
# ==========================

def contador():
    cuenta = 0
    def aumentar():
        nonlocal cuenta
        cuenta += 1
        return cuenta
    return aumentar

mi_contador = contador()

print(mi_contador())  # 1
print(mi_contador())  # 2
print(mi_contador())  # 3


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================

# Crear un generador de saludos personalizados

# def crear_saludo(saludo_inicial):
#     def saludar(nombre):
#         return f"{saludo_inicial}, {nombre}!"
#     return saludar

# saludar_en_espanol = crear_saludo("Hola")
# saludar_en_ingles = crear_saludo("Hi")

# print(saludar_en_espanol("Franco"))  # Hola, Franco!
# print(saludar_en_ingles("Max"))      # Hi, Max!


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - Que las funciones en Python son objetos
# - C√≥mo pasar funciones como argumentos y retornarlas
# - Qu√© es un closure y c√≥mo se comporta
# - C√≥mo usar funciones con estado (sin clases)
# - Aplicaciones pr√°cticas para l√≥gica din√°mica y encapsulada

# Pr√≥xima clase: Decoradores ‚Äì c√≥mo extender funciones con closures.
