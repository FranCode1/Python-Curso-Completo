# ----------------------------------------
# CLASE 38: MULTIPROCESAMIENTO CON MULTIPROCESSING
# ----------------------------------------

# üìå Recordatorio:
# - Los hilos (threading) comparten la misma memoria ‚Üí pueden tener condiciones de carrera.
# - Los procesos (multiprocessing) son independientes ‚Üí cada proceso tiene su propia memoria.
# - Multiprocessing aprovecha varios n√∫cleos del CPU ‚Üí ideal para tareas pesadas de c√°lculo.
# - Conceptos clave: Process, Pool, Queue.

import multiprocessing
import time
import os


# ==========================
# üîπ CREANDO UN PROCESO B√ÅSICO
# ==========================

def worker(nombre):
    print(f"üë∑ Proceso {nombre} ejecut√°ndose en PID {os.getpid()}")
    time.sleep(2)
    print(f"‚úÖ Proceso {nombre} terminado")

if __name__ == "__main__":
    proceso1 = multiprocessing.Process(target=worker, args=("A",))
    proceso2 = multiprocessing.Process(target=worker, args=("B",))

    proceso1.start()
    proceso2.start()

    proceso1.join()
    proceso2.join()

    print("‚úÖ Procesos b√°sicos terminados\n")


# ==========================
# üîπ USANDO POOL PARALELAMENTE
# ==========================

def cuadrado(n):
    print(f"üî¢ Calculando {n}^2 en PID {os.getpid()}")
    time.sleep(1)
    return n * n

if __name__ == "__main__":
    with multiprocessing.Pool(processes=4) as pool:
        numeros = [1, 2, 3, 4, 5]
        resultados = pool.map(cuadrado, numeros)
        print("Resultados:", resultados, "\n")


# ==========================
# üîπ USANDO QUEUE PARA COMUNICACI√ìN ENTRE PROCESOS
# ==========================

def productor(queue):
    for i in range(5):
        print(f"üì§ Enviando {i}")
        queue.put(i)
        time.sleep(0.5)

def consumidor(queue):
    while True:
        item = queue.get()
        if item is None:  # se√±al de finalizaci√≥n
            break
        print(f"üì• Recibido {item}")

if __name__ == "__main__":
    queue = multiprocessing.Queue()

    p1 = multiprocessing.Process(target=productor, args=(queue,))
    p2 = multiprocessing.Process(target=consumidor, args=(queue,))

    p1.start()
    p2.start()

    p1.join()
    queue.put(None)  # se√±al para terminar consumidor
    p2.join()

    print("‚úÖ Comunicaci√≥n con Queue finalizada\n")


# ==========================
# üîπ COMPARACI√ìN HILOS VS PROCESOS
# ==========================

# - Hilos:
#   ‚úîÔ∏è Ligeros, comparten memoria
#   ‚úîÔ∏è Buenos para tareas de I/O (espera en archivos/red)
#   ‚ùå Limitados por el GIL en Python (solo un hilo ejecuta bytecode a la vez)

# - Procesos:
#   ‚úîÔ∏è Ejecutan en paralelo real en m√∫ltiples n√∫cleos
#   ‚úîÔ∏è Ideales para tareas intensivas en CPU (c√°lculos grandes)
#   ‚ùå M√°s pesados, no comparten memoria directamente (hay que usar Queue, Pipe, etc.)


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================

# üéØ Calcular la suma de cuadrados de una lista muy grande usando multiprocessing

def suma_cuadrados(numeros, queue):
    total = sum(x*x for x in numeros)
    queue.put(total)

if __name__ == "__main__":
    lista = list(range(1, 1_000_01))
    mitad = len(lista) // 2

    queue = multiprocessing.Queue()

    p1 = multiprocessing.Process(target=suma_cuadrados, args=(lista[:mitad], queue))
    p2 = multiprocessing.Process(target=suma_cuadrados, args=(lista[mitad:], queue))

    inicio = time.time()
    p1.start()
    p2.start()
    p1.join()
    p2.join()

    total = queue.get() + queue.get()
    fin = time.time()

    print(f"üî¢ Suma de cuadrados: {total}")
    print(f"‚è±Ô∏è Tiempo total con multiprocessing: {fin - inicio:.4f} segundos")


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - Qu√© es el multiprocesamiento y c√≥mo usar multiprocessing.Process
# - C√≥mo trabajar con Pool para ejecutar funciones en paralelo
# - C√≥mo comunicar procesos con Queue
# - Diferencias entre hilos y procesos en Python
# - Mini proyecto: c√°lculo en paralelo de suma de cuadrados
#
# Pr√≥xima clase: Programaci√≥n funcional en Python (funciones puras, functools, reduce, etc).
