# ----------------------------------------
# CLASE 21: MANEJO DE EXCEPCIONES EN PYTHON
# ----------------------------------------

# üìå ¬øQu√© es una excepci√≥n?
# Un error que ocurre durante la ejecuci√≥n del programa y detiene el flujo normal del c√≥digo.

# Ejemplos comunes:
# - ZeroDivisionError
# - FileNotFoundError
# - TypeError
# - ValueError

# Se pueden manejar con bloques try-except


# ==========================
# üîπ SINTAXIS B√ÅSICA
# ==========================

try:
    numero = int(input("Ingres√° un n√∫mero: "))
    resultado = 10 / numero
    print("Resultado:", resultado)
except ZeroDivisionError:
    print("‚ùå No se puede dividir por cero.")
except ValueError:
    print("‚ùå Ten√©s que ingresar un n√∫mero v√°lido.")
    

# ==========================
# üîπ else y finally
# ==========================

try:
    archivo = open("archivo.txt")
except FileNotFoundError:
    print("‚ùå El archivo no existe.")
else:
    print("‚úÖ Archivo abierto correctamente.")
    archivo.close()
finally:
    print("üîÅ Bloque finally siempre se ejecuta (para cerrar conexiones, liberar recursos, etc).")


# ==========================
# üîπ CAPTURAR EL ERROR COMO OBJETO
# ==========================

try:
    x = 1 / 0
except ZeroDivisionError as e:
    print("Detalles del error:", e)


# ==========================
# üîπ EXCEPCIONES PERSONALIZADAS
# ==========================

# Pod√©s definir tus propios errores heredando de Exception

class EdadInvalidaError(Exception):
    """Excepci√≥n para edades menores a 0."""
    pass

def validar_edad(edad):
    if edad < 0:
        raise EdadInvalidaError("La edad no puede ser negativa.")

try:
    validar_edad(-5)
except EdadInvalidaError as e:
    print("‚ùå Error personalizado:", e)


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================

# üéØ Crear una calculadora segura que no se rompa con entradas inv√°lidas

# def calculadora_segura():
#     try:
#         a = float(input("N√∫mero 1: "))
#         b = float(input("N√∫mero 2: "))
#         operacion = input("Operaci√≥n (+, -, *, /): ")
        
#         if operacion == "+":
#             print("Resultado:", a + b)
#         elif operacion == "-":
#             print("Resultado:", a - b)
#         elif operacion == "*":
#             print("Resultado:", a * b)
#         elif operacion == "/":
#             print("Resultado:", a / b)
#         else:
#             print("‚ùå Operaci√≥n no v√°lida.")
#     except ValueError:
#         print("‚ùå Entrada inv√°lida: ingres√° n√∫meros.")
#     except ZeroDivisionError:
#         print("‚ùå No se puede dividir por cero.")

# calculadora_segura()


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - Qu√© es una excepci√≥n y por qu√© ocurren
# - C√≥mo usar try-except-else-finally para controlarlas
# - C√≥mo capturar errores espec√≠ficos y obtener sus mensajes
# - C√≥mo crear tus propias excepciones
# - C√≥mo proteger tu programa contra fallos inesperados

# Pr√≥xima clase: Pruebas con pytest ‚Äì c√≥mo testear tu c√≥digo de forma profesional.
