# ----------------------------------------
# CLASE 30: METAPROGRAMACI√ìN EN PYTHON
# ----------------------------------------

# üìå ¬øQu√© es la metaprogramaci√≥n?
# - Es la capacidad de un programa de tratar su propio c√≥digo como datos.
# - En Python se hace mediante introspecci√≥n, reflexi√≥n y funciones especiales como getattr, setattr, hasattr, etc.

# ==========================
# üîπ getattr(), hasattr(), setattr(), delattr()
# ==========================

class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad

p = Persona("Franco", 22)

# getattr ‚Üí obtener un atributo por nombre (string)
print(getattr(p, "nombre"))  # Franco

# hasattr ‚Üí verificar si un objeto tiene un atributo
print(hasattr(p, "edad"))  # True
print(hasattr(p, "altura"))  # False

# setattr ‚Üí asignar un valor a un atributo din√°micamente
setattr(p, "altura", 1.80)
print(p.altura)  # 1.8

# delattr ‚Üí eliminar un atributo
delattr(p, "edad")
print(hasattr(p, "edad"))  # False


# ==========================
# üîπ INTROSPECCI√ìN EN PYTHON
# ==========================

# Introspecci√≥n = examinar objetos en tiempo de ejecuci√≥n

print(type(p))              # <class '__main__.Persona'>
print(isinstance(p, Persona)) # True
print(dir(p))               # Lista de atributos y m√©todos del objeto
print(p.__dict__)           # Diccionario con los atributos de instancia


# ==========================
# üîπ REFLEXI√ìN
# ==========================

# Reflexi√≥n = modificar el comportamiento del programa en tiempo de ejecuci√≥n

# Ejemplo: crear clases din√°micamente con type()
Animal = type("Animal", (), {"es_vivo": True})
a = Animal()
print(a.es_vivo)  # True

# Ejemplo: invocar m√©todos din√°micamente
class Calculadora:
    def sumar(self, x, y): return x + y
    def restar(self, x, y): return x - y

calc = Calculadora()

operacion = "sumar"
resultado = getattr(calc, operacion)(5, 3)  # llama a calc.sumar(5,3)
print(resultado)  # 8


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================
# üéØ Crear una funci√≥n gen√©rica que convierta cualquier objeto en diccionario,
# incluyendo atributos din√°micos.

def objeto_a_diccionario(obj):
    atributos = {}
    for attr in dir(obj):
        if not attr.startswith("__"):  # ignorar internos
            valor = getattr(obj, attr)
            if not callable(valor):   # ignorar m√©todos
                atributos[attr] = valor
    return atributos

print(objeto_a_diccionario(p))
# {'altura': 1.8, 'nombre': 'Franco'}


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - Qu√© es la metaprogramaci√≥n
# - Usar getattr, hasattr, setattr, delattr
# - Introspecci√≥n: type, isinstance, dir, __dict__
# - Reflexi√≥n: modificar clases/objetos en tiempo de ejecuci√≥n
# - C√≥mo crear clases y m√©todos din√°micamente

# Pr√≥xima clase: Manejo avanzado de colecciones en Python (collections, itertools, functools)
