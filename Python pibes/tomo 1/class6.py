¬°Genial, Franco! La **Clase 6: Diccionarios** introduce una de las estructuras de datos m√°s poderosas y usadas de Python: los **`dict`**. Es una evoluci√≥n l√≥gica despu√©s de listas y condicionales, y esencial para proyectos m√°s complejos.

---

## üìñ Clase 6: **Diccionarios en Python**

---

### üß† 1. Resumen del tema

#### ¬øQu√© es un diccionario?

Un **diccionario** (`dict`) es una estructura que almacena datos en **pares clave-valor** (key-value).
A diferencia de las listas, los diccionarios **no usan √≠ndices num√©ricos**, sino **claves** que pueden ser strings, n√∫meros, etc.

---

### ‚úÖ Sintaxis b√°sica

```python
persona = {
    "nombre": "Franco",
    "edad": 22,
    "ciudad": "C√≥rdoba"
}
```

Acceder a valores:

```python
print(persona["nombre"])  # "Franco"
```

Modificar valores:

```python
persona["edad"] = 23
```

Agregar nuevos pares:

```python
persona["profesion"] = "Dise√±ador"
```

Eliminar claves:

```python
del persona["ciudad"]
```

---

### üîß M√©todos √∫tiles

| M√©todo          | Descripci√≥n                            |
| --------------- | -------------------------------------- |
| `.keys()`       | Retorna las claves                     |
| `.values()`     | Retorna los valores                    |
| `.items()`      | Retorna los pares clave-valor          |
| `.get("clave")` | Accede sin error si no existe la clave |

```python
print(persona.keys())
print(persona.values())
print(persona.get("altura", "No especificado"))
```

---

### üìö Diccionarios anidados

Un diccionario puede contener otros diccionarios:

```python
usuarios = {
    "usuario1": {"nombre": "Luc√≠a", "edad": 20},
    "usuario2": {"nombre": "Pedro", "edad": 25}
}
```

---

### üé• 2. Video explicativo

üìå **\[Espacio para tu video sobre diccionarios]**

> Mostr√°:
>
> * Qu√© es un diccionario
> * C√≥mo acceder, modificar, agregar y eliminar claves
> * Mostrar `.get()`, `.keys()`, `.items()`
> * Mostrar ejemplos de diccionarios anidados y c√≥mo recorrerlos con `for`

---

### üîó 3. Links √∫tiles para profundizar

* üìò [Diccionarios en Python ‚Äì W3Schools](https://www.w3schools.com/python/python_dictionaries.asp)
* üîé [Diccionarios ‚Äì Programiz](https://www.programiz.com/python-programming/dictionary)
* üìñ [Dict ‚Äì Documentaci√≥n oficial](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict)
* üß† [Anidamiento de diccionarios ‚Äì Real Python (en ingl√©s)](https://realpython.com/python-dicts/)

---

### üöÄ 4. Mini proyecto

**üìÑ Proyecto: ‚ÄúFicha de usuario con diccionario‚Äù**

Objetivo: practicar creaci√≥n, modificaci√≥n y acceso a diccionarios.

#### Instrucciones:

1. Cre√° un diccionario llamado `usuario` con los siguientes datos:

   * nombre
   * edad
   * email
   * ciudad

2. Mostr√° cada dato con `print()`.

3. Agreg√° una nueva clave: `"ocupacion"`.

4. Mostr√° todas las claves y todos los valores.

5. Permit√≠ que el usuario cambie su ciudad usando `input()`.

#### üí° Ejemplo esperado:

```python
usuario = {
    "nombre": "Franco Lugo",
    "edad": 22,
    "email": "franco@email.com",
    "ciudad": "C√≥rdoba"
}

print("Nombre:", usuario["nombre"])
print("Edad:", usuario["edad"])
print("Email:", usuario["email"])
print("Ciudad:", usuario["ciudad"])

usuario["ocupacion"] = "Dise√±ador Web"

print("\nClaves:", list(usuario.keys()))
print("Valores:", list(usuario.values()))

nueva_ciudad = input("¬øEn qu√© ciudad viv√≠s ahora? ")
usuario["ciudad"] = nueva_ciudad

print("\nDatos actualizados:", usuario)
```

> ‚ú® **Bonus:** agreg√° m√°s usuarios como diccionarios anidados.

---

¬øQuer√©s que pasemos ahora a la **Clase 7** (por ejemplo, bucles `while`, o funciones), o te preparo una carpeta con PDFs o presentaciones de estas 6 clases? Tambi√©n puedo armarte un √≠ndice del curso para distribuirlo mejor.
