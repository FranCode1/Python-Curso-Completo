¬°Excelente, Franco! En esta **Clase 11** vamos a introducir el **testing (pruebas)**, una habilidad crucial para escribir c√≥digo **confiable y mantenible**. Aunque muchas veces se deja para programadores avanzados, es bueno ense√±ar desde el principio a **probar y verificar que el c√≥digo funciona como se espera**.

---

## ‚úÖ Clase 11: **Testing Your Code en Python**

---

### üß† 1. Resumen del tema

### üß™ ¬øQu√© es un test?

Un **test** es una verificaci√≥n autom√°tica que se hace sobre el c√≥digo para asegurarse de que devuelve el resultado correcto.
Hay muchos tipos de test, pero el m√°s b√°sico y com√∫n es el **test unitario**, que prueba una funci√≥n espec√≠fica.

---

### üß∞ ¬øPor qu√© hacer testing?

* Evita errores invisibles
* Asegura que los cambios no rompan cosas
* Facilita el mantenimiento del c√≥digo
* Te obliga a pensar en los posibles errores

---

### üß™ Ejemplo b√°sico sin librer√≠as

```python
def sumar(a, b):
    return a + b

# test manual
if sumar(2, 3) == 5:
    print("‚úÖ Test pasado")
else:
    print("‚ùå Test fallado")
```

---

### ‚úÖ Usando la librer√≠a `unittest` (incluida en Python)

```python
import unittest

def multiplicar(a, b):
    return a * b

class TestMultiplicacion(unittest.TestCase):
    def test_positivo(self):
        self.assertEqual(multiplicar(2, 3), 6)

    def test_cero(self):
        self.assertEqual(multiplicar(0, 100), 0)

    def test_negativos(self):
        self.assertEqual(multiplicar(-2, 3), -6)

if __name__ == "__main__":
    unittest.main()
```

üìù Cada `def test_algo(self):` es un test distinto.

---

### üé• 2. Video explicativo

üìå **\[Espacio para tu video sobre testing]**

> Mostr√°:
>
> * Qu√© es un test unitario
> * C√≥mo hacer uno a mano
> * C√≥mo usar `unittest`
> * Qu√© pasa cuando falla un test
> * C√≥mo se corre el archivo
> * (Bonus) C√≥mo hacer tests para funciones que piden `input()` (mocking)

---

### üîó 3. Links √∫tiles para profundizar

* üìò [Testing en Python ‚Äì W3Schools](https://www.w3schools.com/python/python_try_except.asp)
* üß™ [unittest ‚Äì Docs oficiales](https://docs.python.org/3/library/unittest.html)
* üìö [Gu√≠a pr√°ctica de testing ‚Äì Real Python (ingl√©s)](https://realpython.com/python-testing/)
* üß† [Conceptos de testing para principiantes ‚Äì Programiz](https://www.programiz.com/python-programming/unittest)

---

### üöÄ 4. Mini proyecto

**üìÑ Proyecto: ‚ÄúVerificador de funciones matem√°ticas‚Äù**

Objetivo: crear y probar funciones con `unittest`.

#### Instrucciones:

1. Escrib√≠ tres funciones:

   * `es_par(numero)` ‚Üí devuelve `True` si el n√∫mero es par
   * `cuadrado(numero)` ‚Üí devuelve el cuadrado del n√∫mero
   * `dividir(a, b)` ‚Üí devuelve la divisi√≥n (us√° try/except para dividir por cero)

2. Escrib√≠ una clase de test para cada funci√≥n usando `unittest`.

#### üí° Ejemplo esperado:

```python
import unittest

def es_par(n):
    return n % 2 == 0

def cuadrado(n):
    return n ** 2

def dividir(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        return "No se puede dividir por cero"

class TestFunciones(unittest.TestCase):
    def test_es_par(self):
        self.assertTrue(es_par(4))
        self.assertFalse(es_par(5))

    def test_cuadrado(self):
        self.assertEqual(cuadrado(3), 9)

    def test_dividir(self):
        self.assertEqual(dividir(10, 2), 5)
        self.assertEqual(dividir(10, 0), "No se puede dividir por cero")

if __name__ == "__main__":
    unittest.main()
```

> ‚ú® **Bonus:** Mostr√° c√≥mo se ve cuando uno de los tests falla y c√≥mo lo correg√≠s.

---

¬øSeguimos con la **Clase 12** (por ejemplo, manejo de m√≥dulos o librer√≠as externas como `math`, `random`, o `datetime`) o quer√©s que compile estas 11 clases como PDF, presentaci√≥n o curso en carpetas? Tambi√©n puedo ayudarte a preparar una clase final con proyecto integrador.
