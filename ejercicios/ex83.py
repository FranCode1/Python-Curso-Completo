# =====================================================================
# EJERCICIO 83: Clase Libro
# ---------------------------------------------------------------------
# Crear una clase "libro" con atributos (encapsulados)
# ‚Ä¢ titulo
# ‚Ä¢ autor
# ‚Ä¢ a√±o
# ‚Ä¢ prestado
# ‚Ä¢ cantidad_veces_prestado
# En el programa inicial crear una lista vac√≠a
# Permitir cargar tres biblioteca en la lista
# Recorrer la lista mostrando los datos
# M√©todos:
# ‚Ä¢ Constructor: recibe los datos de los atributos [LISTO]
# ‚Ä¢ Mostrar_Datos: Muestra todos los atributos [LISTO]
# ‚Ä¢ mostrar_disponibles: Muestra todos los de biblioteca disponibles [LISTO]
# ‚Ä¢ libro_prestado: Marca un libro como prestado segun su nombre [LISTO]
# ‚Ä¢ mostrar_prestados: Muestra todos los biblioteca prestados y el
# usuario marca uno como disponible [LISTO]
# ‚Ä¢ cantidad_veces_prestado: Muestra la cantidad de veces que se presto el libro [LISTO]
# ‚Ä¢ mostrar-estadistica: Muestra cantidad de veces prestado, porcentaje de veces prestados, cantidad de libros disponibles y mostrar los datos del libro mas prestado
# =====================================================================

class Libro:
    def __init__(self, titulo, autor, a√±o):
        self.__titulo = titulo
        self.__autor = autor
        self.__a√±o = a√±o
        self.__prestado = False
        self.__cantidad_veces_prestado = 0

    # -----------------------------
    # M√©todos
    # -----------------------------
    def prestar(self):
        if self.__prestado:
            print(f"‚ùå El libro '{self.__titulo}' ya est√° prestado.")
        else:
            self.__prestado = True
            self.__cantidad_veces_prestado += 1
            print(f"‚úÖ Ahora el libro '{self.__titulo}' est√° prestado.")

    def devolver(self):
        if not self.__prestado:
            print(f"üìó El libro '{self.__titulo}' ya estaba disponible.")
        else:
            self.__prestado = False
            print(f"üìò El libro '{self.__titulo}' fue devuelto y ahora est√° disponible.")

    def mostrar_datos(self):
        estado = "Prestado" if self.__prestado else "Disponible"
        print(f"üìñ '{self.__titulo}' - {self.__autor} ({self.__a√±o}) | Estado: {estado} | Veces prestado: {self.__cantidad_veces_prestado}")

    def esta_disponible(self):
        return not self.__prestado

    def get_titulo(self):
        return self.__titulo

    def get_cantidad_prestamos(self):
        return self.__cantidad_veces_prestado


# -----------------------------
# Funciones auxiliares
# -----------------------------
def mostrar_disponibles(biblioteca):
    print("\nüìö Libros disponibles:")
    disponibles = [libro for libro in biblioteca if libro.esta_disponible()]
    if not disponibles:
        print("No hay libros disponibles.")
    else:
        for libro in disponibles:
            libro.mostrar_datos()


def mostrar_prestados(biblioteca):
    print("\nüìï Libros prestados:")
    prestados = [libro for libro in biblioteca if not libro.esta_disponible()]
    if not prestados:
        print("No hay libros prestados.")
    else:
        for i, libro in enumerate(prestados, 1):
            print(f"{i}. {libro.get_titulo()}")
        opcion = int(input("Ingrese el n√∫mero del libro a devolver (0 para cancelar): "))
        if 1 <= opcion <= len(prestados):
            prestados[opcion - 1].devolver()


def mostrar_estadistica(biblioteca):
    print("\nüìä Estad√≠sticas:")

    total_prestamos = sum(libro.get_cantidad_prestamos() for libro in biblioteca)
    total_libros = len(biblioteca)
    disponibles = sum(1 for libro in biblioteca if libro.esta_disponible())

    print(f"Total de pr√©stamos realizados: {total_prestamos}")
    print(f"Cantidad de libros disponibles: {disponibles}/{total_libros}")

    if total_prestamos > 0:
        mas_prestado = max(biblioteca, key=lambda l: l.get_cantidad_prestamos())
        porcentaje = (mas_prestado.get_cantidad_prestamos() / total_prestamos) * 100
        print(f"üìå Libro m√°s prestado: '{mas_prestado.get_titulo()}' con {mas_prestado.get_cantidad_prestamos()} pr√©stamos ({porcentaje:.2f}% del total)")
    else:
        print("A√∫n no se prestaron libros.")


# =====================================================================
# PROGRAMA PRINCIPAL
# =====================================================================
biblioteca = []

# Cargar libros
for i in range(3):
    titulo = input(f"Ingrese el nombre del libro {i+1}: ")
    autor = input("Ingrese el nombre del autor: ")
    a√±o = int(input("Ingrese el a√±o de publicaci√≥n: "))
    biblioteca.append(Libro(titulo, autor, a√±o))

# Mostrar todos los libros
print("\nüìö Biblioteca cargada:")
for libro in biblioteca:
    libro.mostrar_datos()

# Ejemplo de uso
mostrar_disponibles(biblioteca)
biblioteca[0].prestar()
mostrar_prestados(biblioteca)
mostrar_estadistica(biblioteca)
