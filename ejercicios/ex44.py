# =====================================================================
# EJERCICIO 44: Validaci√≥n de contrase√±a segura
# ---------------------------------------------------------------------
# Escrib√≠ un programa que pida una contrase√±a y verifique que:
# ‚Ä¢	Tenga al menos 8 caracteres.
# ‚Ä¢	Contenga al menos una letra may√∫scula.
# ‚Ä¢	Contenga al menos un n√∫mero.
# ‚Ä¢	No contenga espacios.
# El programa debe repetirse hasta que el usuario ingrese una contrase√±a v√°lida.
# =====================================================================

# ---------- Forma 1: cl√°sico for + flags ----------
def validar_contrase√±a_1():
    while True:
        contrase√±a = input("Ingrese la contrase√±a: ")
        longitud_valida = len(contrase√±a) >= 8
        tiene_mayuscula = any(c.isupper() for c in contrase√±a)
        tiene_numero = any(c.isdigit() for c in contrase√±a)
        sin_espacios = " " not in contrase√±a

        if longitud_valida and tiene_mayuscula and tiene_numero and sin_espacios:
            print("‚úÖ Contrase√±a aceptada.")
            break
        else:
            print("‚ùå Contrase√±a inv√°lida. Intent√° de nuevo.")

# ---------- Forma 2: usando funciones auxiliares ----------
def es_segura(contrase√±a):
    return (len(contrase√±a) >= 8 and
            any(c.isupper() for c in contrase√±a) and
            any(c.isdigit() for c in contrase√±a) and
            " " not in contrase√±a)

def validar_contrase√±a_2():
    while True:
        contrase√±a = input("Ingrese la contrase√±a: ")
        if es_segura(contrase√±a):
            print("‚úÖ Contrase√±a aceptada.")
            break
        else:
            print("‚ùå Contrase√±a inv√°lida. Intent√° de nuevo.")

# ---------- Forma 3: usando expresiones regulares ----------
import re
def validar_contrase√±a_3():
    patron = re.compile(r'^(?=.*[A-Z])(?=.*\d)[^\s]{8,}$')
    while True:
        contrase√±a = input("Ingrese la contrase√±a: ")
        if patron.match(contrase√±a):
            print("‚úÖ Contrase√±a aceptada.")
            break
        else:
            print("‚ùå Contrase√±a inv√°lida. Intent√° de nuevo.")

# ---------- Forma 4: mensajes detallados ----------
def validar_contrase√±a_4():
    while True:
        contrase√±a = input("Ingrese la contrase√±a: ")
        errores = []
        if len(contrase√±a) < 8:
            errores.append("Debe tener al menos 8 caracteres.")
        if not any(c.isupper() for c in contrase√±a):
            errores.append("Debe contener al menos una may√∫scula.")
        if not any(c.isdigit() for c in contrase√±a):
            errores.append("Debe contener al menos un n√∫mero.")
        if " " in contrase√±a:
            errores.append("No debe contener espacios.")
        if not errores:
            print("‚úÖ Contrase√±a aceptada.")
            break
        else:
            print("‚ùå Contrase√±a inv√°lida:")
            for e in errores:
                print("-", e)
            print("üîÅ Intent√° de nuevo.\n")

# ---------- Forma 5: con todas las validaciones en una funci√≥n ----------
def validar_contrase√±a_final(contrase√±a):
    return (len(contrase√±a) >= 8 and
            any(c.isupper() for c in contrase√±a) and
            any(c.isdigit() for c in contrase√±a) and
            " " not in contrase√±a)

def validar_contrase√±a_5():
    while True:
        contrase√±a = input("Ingrese la contrase√±a: ")
        if validar_contrase√±a_final(contrase√±a):
            print("‚úÖ Contrase√±a aceptada.")
            break
        else:
            print("‚ùå Contrase√±a inv√°lida. Intent√° de nuevo.")

# =====================================================
# Ejecuci√≥n del programa
# =====================================================
if __name__ == "__main__":
    # Descomentar la forma que quieras probar
    # validar_contrase√±a_1()
    # validar_contrase√±a_2()
    # validar_contrase√±a_3()
    # validar_contrase√±a_4()
    validar_contrase√±a_5()
