# ============================================
# EJERCICIO 49 - Validar mes y a√±o
# Verificar que:
# - El mes solo tenga letras y empiece en may√∫scula
# - El a√±o solo tenga n√∫meros
# - El a√±o est√© entre 1900 y el actual
# ============================================

# üîπ M√âTODO 1: Validaci√≥n con flags y estructura clara

from datetime import datetime

def validar_mes_y_a√±o_1():
    a√±o_actual = datetime.now().year

    while True:
        mes = input("Ingrese el mes: ").strip()
        a√±o = input("Ingrese el a√±o: ").strip()
        errores = False

        if not mes or not mes.isalpha() or not mes[0].isupper():
            print("‚ùå El mes debe comenzar con may√∫scula y contener solo letras.")
            errores = True

        if not a√±o.isdigit() or not (1900 <= int(a√±o) <= a√±o_actual):
            print(f"‚ùå El a√±o debe estar entre 1900 y {a√±o_actual}, y contener solo n√∫meros.")
            errores = True

        if not errores:
            print(f"‚úÖ Mes y a√±o v√°lidos: {mes.title()} {a√±o}")
            break
        print("üîÅ Intent√° de nuevo.\n")

# validar_mes_y_a√±o_1()


# üîπ M√âTODO 2: M√°s modular, separa cada validaci√≥n

def validar_mes(mes):
    return mes and mes.isalpha() and mes[0].isupper()

def validar_a√±o(a√±o):
    a√±o_actual = datetime.now().year
    return a√±o.isdigit() and 1900 <= int(a√±o) <= a√±o_actual

def validar_mes_y_a√±o_2():
    while True:
        mes = input("Ingrese el mes: ").strip()
        a√±o = input("Ingrese el a√±o: ").strip()

        if not validar_mes(mes):
            print("‚ùå El mes debe comenzar con may√∫scula y tener solo letras.")
        elif not validar_a√±o(a√±o):
            print("‚ùå El a√±o debe ser num√©rico y estar entre 1900 y el actual.")
        else:
            print(f"‚úÖ Mes y a√±o v√°lidos: {mes.title()} {a√±o}")
            break
        print("üîÅ Intent√° de nuevo.\n")

# validar_mes_y_a√±o_2()


# üîπ M√âTODO 3: Estilo early-return para claridad

def validar_mes_y_a√±o_3():
    a√±o_actual = datetime.now().year
    while True:
        mes = input("Mes: ").strip()
        if not mes or not mes.isalpha() or not mes[0].isupper():
            print("‚ùå Mes inv√°lido.")
            continue

        a√±o = input("A√±o: ").strip()
        if not a√±o.isdigit():
            print("‚ùå El a√±o debe ser num√©rico.")
            continue

        a√±o = int(a√±o)
        if a√±o < 1900 or a√±o > a√±o_actual:
            print(f"‚ùå A√±o fuera de rango (1900-{a√±o_actual})")
            continue

        print(f"‚úÖ Mes y a√±o v√°lidos: {mes.title()} {a√±o}")
        break

# validar_mes_y_a√±o_3()


# üîπ M√âTODO 4: Guarda errores y los muestra juntos

def validar_mes_y_a√±o_4():
    a√±o_actual = datetime.now().year
    while True:
        errores = []

        mes = input("Mes: ").strip()
        a√±o = input("A√±o: ").strip()

        if not mes:
            errores.append("El mes no puede estar vac√≠o.")
        elif not mes.isalpha():
            errores.append("El mes solo debe tener letras.")
        elif not mes[0].isupper():
            errores.append("El mes debe comenzar con may√∫scula.")

        if not a√±o:
            errores.append("El a√±o no puede estar vac√≠o.")
        elif not a√±o.isdigit():
            errores.append("El a√±o debe tener solo n√∫meros.")
        else:
            a√±o_int = int(a√±o)
            if not (1900 <= a√±o_int <= a√±o_actual):
                errores.append(f"El a√±o debe estar entre 1900 y {a√±o_actual}.")

        if not errores:
            print(f"‚úÖ Mes y a√±o v√°lidos: {mes.title()} {a√±o}")
            break
        else:
            for error in errores:
                print("‚ùå", error)
            print("üîÅ Intent√° nuevamente.\n")

# validar_mes_y_a√±o_4()


# üîπ M√âTODO 5: Con match-case (estructura moderna)

def validar_mes_y_a√±o_5():
    a√±o_actual = datetime.now().year
    while True:
        mes = input("Mes: ").strip()
        a√±o = input("A√±o: ").strip()

        match (mes.isalpha(), mes[0].isupper() if mes else False, a√±o.isdigit()):
            case (True, True, True):
                a√±o = int(a√±o)
                if 1900 <= a√±o <= a√±o_actual:
                    print(f"‚úÖ Mes y a√±o v√°lidos: {mes.title()} {a√±o}")
                    break
                else:
                    print(f"‚ùå El a√±o debe estar entre 1900 y {a√±o_actual}.")
            case _:
                print("‚ùå Datos inv√°lidos. El mes debe ser solo letras, comenzar con may√∫scula y el a√±o debe ser num√©rico.")
        print("üîÅ Intent√° nuevamente.\n")

# validar_mes_y_a√±o_5()
