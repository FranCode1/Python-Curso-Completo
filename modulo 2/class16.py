# ----------------------------------------
# CLASE 16: DECORADORES EN PYTHON
# ----------------------------------------

# üìå ¬øQu√© es un decorador?

# Es una funci√≥n que recibe otra funci√≥n como argumento y devuelve una nueva funci√≥n.
# Se usa para "envolver" otra funci√≥n y modificar su comportamiento.

# Se basa en:
# - Funciones como objetos
# - Closures

# Sintaxis b√°sica:
# @decorador
# def mi_funcion():
#     ...

# Es equivalente a: mi_funcion = decorador(mi_funcion)


# ==========================
# üîπ EJEMPLO B√ÅSICO
# ==========================

def decorador(func):
    def nueva_funcion():
        print("Antes de ejecutar la funci√≥n...")
        func()
        print("Despu√©s de ejecutar la funci√≥n...")
    return nueva_funcion

@decorador
def saludar():
    print("Hola, esto es una funci√≥n normal.")

saludar()

# Salida:
# Antes de ejecutar la funci√≥n...
# Hola, esto es una funci√≥n normal.
# Despu√©s de ejecutar la funci√≥n...


# ==========================
# üîπ DECORADORES CON PAR√ÅMETROS
# ==========================

def decorador_con_parametros(func):
    def wrapper(nombre):
        print("Validando nombre...")
        func(nombre)
        print("Fin de ejecuci√≥n.")
    return wrapper

@decorador_con_parametros
def saludar(nombre):
    print(f"Hola {nombre}!")

saludar("Franco")


# ==========================
# üîπ MANTENER LA INFORMACI√ìN ORIGINAL
# ==========================

# Para conservar el nombre y la docstring de la funci√≥n decorada:
from functools import wraps

def decorador_pro(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        print(f"Llamando a {func.__name__}")
        return func(*args, **kwargs)
    return wrapper


@decorador_pro
def sumar(a, b):
    """Suma dos n√∫meros"""
    return a + b

print(sumar(3, 4))  # 7
print(sumar.__doc__)  # Suma dos n√∫meros


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================

# Crear un decorador que mida el tiempo de ejecuci√≥n de una funci√≥n

# import time

# def medir_tiempo(func):
#     def wrapper(*args, **kwargs):
#         inicio = time.time()
#         resultado = func(*args, **kwargs)
#         fin = time.time()
#         print(f"Tiempo de ejecuci√≥n: {fin - inicio:.4f} segundos")
#         return resultado
#     return wrapper

# @medir_tiempo
# def tarea_lenta():
#     for _ in range(10000000):
#         pass

# tarea_lenta()


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - Qu√© es un decorador y c√≥mo funciona
# - C√≥mo escribir decoradores simples y con argumentos
# - C√≥mo usar `@wraps` para mantener metadatos de funciones
# - C√≥mo aplicarlo para validaci√≥n, logging, tiempo de ejecuci√≥n, etc.

# Pr√≥xima clase: M√≥dulos y paquetes ‚Äì organizaci√≥n profesional de proyectos.
