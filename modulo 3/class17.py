# ----------------------------------------
# CLASE 17: DOCUMENTACI√ìN EN PYTHON
# ----------------------------------------

# üìå ¬øPor qu√© es importante documentar c√≥digo?

# - Facilita la comprensi√≥n (para otros y para vos en el futuro)
# - Mejora la colaboraci√≥n en equipo
# - Permite que IDEs/autocompletado muestren ayuda √∫til
# - Profesionaliza tu trabajo

# Existen varias formas de documentar en Python:
# - Comentarios (inline o de bloque)
# - Docstrings (documentaci√≥n de funciones, clases, m√≥dulos)


# ==========================
# üîπ COMENTARIOS
# ==========================

# Comentarios simples con "#"
# Se usan para explicar l√≠neas espec√≠ficas

# Esta funci√≥n calcula la suma de dos n√∫meros
def sumar(a, b):
    return a + b  # Devuelve el resultado


# ==========================
# üîπ DOCSTRINGS (""" """)
# ==========================

# Un docstring es un string al inicio de funciones, clases o archivos que explica su prop√≥sito

def saludar(nombre):
    """
    Recibe un nombre y muestra un saludo personalizado.

    Par√°metros:
    - nombre (str): El nombre de la persona a saludar

    Retorna:
    - None
    """
    print(f"Hola, {nombre}!")

help(saludar)  # Muestra la documentaci√≥n


# ==========================
# üîπ DOCUMENTAR CLASES
# ==========================

class Persona:
    """
    Representa a una persona.

    Atributos:
    - nombre (str): nombre de la persona
    - edad (int): edad en a√±os
    """

    def __init__(self, nombre, edad):
        """
        Inicializa una nueva persona.

        Par√°metros:
        - nombre (str)
        - edad (int)
        """
        self.nombre = nombre
        self.edad = edad

    def saludar(self):
        """Imprime un saludo con nombre y edad."""
        print(f"Hola, soy {self.nombre} y tengo {self.edad} a√±os.")


# ==========================
# üîπ VER DOCUMENTACI√ìN OFICIAL
# ==========================

# Sitios √∫tiles:
# - https://docs.python.org/3/
# - https://pypi.org/ ‚Üí para buscar librer√≠as de terceros
# - https://realpython.com/ ‚Üí tutoriales y ejemplos claros
# - https://devdocs.io/python/ ‚Üí documentaci√≥n r√°pida
# - https://www.w3schools.com/python/ ‚Üí para principiantes

# Pod√©s usar help() en consola para ver documentaci√≥n r√°pida:
# help(print)
# help(len)


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================

# Document√° este peque√±o m√≥dulo que contiene 2 funciones

# def area_triangulo(base, altura):
#     """Calcula el √°rea de un tri√°ngulo dado su base y altura."""
#     return (base * altura) / 2

# def es_par(numero):
#     """Devuelve True si el n√∫mero es par, False si es impar."""
#     return numero % 2 == 0

# # Probar funciones con ayuda
# print(area_triangulo(10, 5))
# print(es_par(8))
# help(area_triangulo)


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - C√≥mo escribir comentarios √∫tiles y claros
# - Qu√© es un docstring y c√≥mo documentar funciones, clases y m√≥dulos
# - C√≥mo usar help() y otras herramientas para entender c√≥digo
# - D√≥nde encontrar y c√≥mo leer la documentaci√≥n oficial de Python

# Pr√≥xima clase: M√≥dulos y paquetes ‚Äì organizaci√≥n profesional del c√≥digo.
