# ----------------------------------------
# CLASE 24: EXPRESIONES REGULARES EN PYTHON
# ----------------------------------------

# üìå ¬øQu√© es una expresi√≥n regular (regex)?
# Una secuencia de caracteres que define un patr√≥n de b√∫squeda sobre texto.

# Python incluye el m√≥dulo `re` para trabajar con regex.

import re


# ==========================
# üîπ B√öSQUEDA SIMPLE CON re.search()
# ==========================

texto = "Mi n√∫mero es 1123-456-789 y mi mail es franco@mail.com"

# Buscar si hay un n√∫mero
resultado = re.search(r"\d{4}", texto)
print(resultado.group())  # 1123


# ==========================
# üîπ COINCIDENCIAS CON re.findall()
# ==========================

# Encuentra todos los mails en el texto
mails = re.findall(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", texto)
print(mails)  # ['franco@mail.com']


# ==========================
# üîπ COINCIDENCIAS AL INICIO CON re.match()
# ==========================

# Solo verifica si el inicio del texto coincide
print(re.match(r"Mi n√∫mero", texto))  # Coincide
print(re.match(r"n√∫mero", texto))     # No coincide


# ==========================
# üîπ SUSTITUIR TEXTO CON re.sub()
# ==========================

nuevo_texto = re.sub(r"\d", "*", texto)
print(nuevo_texto)  # Reemplaza todos los n√∫meros por "*"


# ==========================
# üîπ GRUPOS Y CAPTURAS
# ==========================

texto_fecha = "La fecha es 24/06/2025"

# Extraer d√≠a, mes y a√±o
match = re.search(r"(\d{2})/(\d{2})/(\d{4})", texto_fecha)
if match:
    dia, mes, anio = match.groups()
    print(f"D√≠a: {dia}, Mes: {mes}, A√±o: {anio}")


# ==========================
# üîπ PATRONES M√ÅS COMUNES
# ==========================

# \d ‚Üí cualquier d√≠gito (0-9)
# \w ‚Üí car√°cter alfanum√©rico (letra, n√∫mero o _)
# \s ‚Üí espacio en blanco
# .  ‚Üí cualquier car√°cter (excepto salto de l√≠nea)
# +  ‚Üí una o m√°s repeticiones
# *  ‚Üí cero o m√°s repeticiones
# ?  ‚Üí cero o una repetici√≥n
# {n} ‚Üí exactamente n veces
# ^  ‚Üí inicio de l√≠nea
# $  ‚Üí fin de l√≠nea
# [abc] ‚Üí a, b o c
# [^abc] ‚Üí cualquier cosa menos a, b o c


# ==========================
# üß™ MINI PROYECTO PR√ÅCTICO
# ==========================

# üéØ Validar una contrase√±a segura:
# Debe tener al menos:
# - 8 caracteres
# - una may√∫scula
# - una min√∫scula
# - un n√∫mero

def validar_password(password):
    patron = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$"
    return re.match(patron, password) is not None

# Pruebas
print(validar_password("Abc12345"))  # True
print(validar_password("abc123"))    # False


# ----------------------------------------
# CONCLUSI√ìN DE LA CLASE
# ----------------------------------------

# En esta clase aprendiste:
# - Qu√© es una expresi√≥n regular y c√≥mo usar el m√≥dulo re
# - C√≥mo buscar, encontrar y reemplazar texto
# - C√≥mo capturar grupos espec√≠ficos del texto
# - C√≥mo validar formatos como mails, fechas y contrase√±as

# Pr√≥xima clase: Programaci√≥n funcional en Python ‚Äì map, filter, reduce y m√°s.
