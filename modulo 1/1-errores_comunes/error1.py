# ----------------------------------------
# CLASE X: ERRORES COMUNES EN PYTHON
# ----------------------------------------

# üéØ Objetivo:
# Reconocer los errores m√°s frecuentes al comenzar con Python,
# entender por qu√© ocurren y c√≥mo corregirlos.
# ----------------------------------------

# ----------------------------------------------------
# 1. ERROR DE SINTAXIS (SyntaxError)
# ----------------------------------------------------
# Ocurre cuando escribimos mal las reglas del lenguaje.

# ‚ùå Ejemplo incorrecto:
# print("Hola"

# ‚úÖ Correcci√≥n:
print("Hola")   # Cerramos bien el par√©ntesis


# ----------------------------------------------------
# 2. ERROR DE NOMBRE (NameError)
# ----------------------------------------------------
# Pasa cuando usamos una variable que no existe.

# ‚ùå Ejemplo incorrecto:
# print(mensage)   # Variable no definida (error de ortograf√≠a)

# ‚úÖ Correcci√≥n:
mensaje = "Hola, mundo"
print(mensaje)


# ----------------------------------------------------
# 3. ERROR DE TIPOS (TypeError)
# ----------------------------------------------------
# Sucede cuando intentamos mezclar tipos de datos incompatibles.

# ‚ùå Ejemplo incorrecto:
# numero = 5
# texto = "a√±os"
# print(numero + texto)   # No se puede sumar int + str

# ‚úÖ Correcci√≥n:
numero = 5
texto = "a√±os"
print(str(numero) + " " + texto)  # Convertimos a string


# ----------------------------------------------------
# 4. ERROR DE INDENTACI√ìN (IndentationError)
# ----------------------------------------------------
# Python usa indentaci√≥n (espacios/tabulaciones) para definir bloques de c√≥digo.

# ‚ùå Ejemplo incorrecto:
# def saludar():
# print("Hola")   # Falta la indentaci√≥n dentro de la funci√≥n

# ‚úÖ Correcci√≥n:
def saludar():
    print("Hola")   # Indentamos con 4 espacios

saludar()


# ----------------------------------------------------
# 5. ERROR DE √çNDICE (IndexError)
# ----------------------------------------------------
# Ocurre al acceder a un √≠ndice fuera de rango en listas o strings.

# ‚ùå Ejemplo incorrecto:
# numeros = [1, 2, 3]
# print(numeros[5])   # No existe √≠ndice 5

# ‚úÖ Correcci√≥n:
numeros = [1, 2, 3]
print(numeros[2])   # √öltimo √≠ndice v√°lido


# ----------------------------------------------------
# 6. ERROR DE VALOR (ValueError)
# ----------------------------------------------------
# Aparece cuando le damos un valor inv√°lido a una funci√≥n.

# ‚ùå Ejemplo incorrecto:
# edad = int("veinte")   # No se puede convertir texto a n√∫mero

# ‚úÖ Correcci√≥n:
edad = int("20")
print("Edad:", edad)


# ----------------------------------------------------
# 7. ERROR DE ATRIBUTO (AttributeError)
# ----------------------------------------------------
# Ocurre cuando intentamos usar un m√©todo que no existe en un objeto.

# ‚ùå Ejemplo incorrecto:
# texto = "python"
# texto.append("3")   # append() es de listas, no de strings

# ‚úÖ Correcci√≥n:
texto = "python"
print(texto.upper())   # upper() s√≠ existe en strings


# ----------------------------------------------------
# 8. ERROR DE IMPORTACI√ìN (ImportError / ModuleNotFoundError)
# ----------------------------------------------------
# Pasa cuando intentamos importar un m√≥dulo que no est√° instalado.

# ‚ùå Ejemplo incorrecto:
# import pepito

# ‚úÖ Correcci√≥n:
import math
print("Ra√≠z cuadrada de 16:", math.sqrt(16))


# ----------------------------------------------------
# 9. ERROR DE DIVISI√ìN POR CERO (ZeroDivisionError)
# ----------------------------------------------------
# Ocurre al dividir entre 0.

# ‚ùå Ejemplo incorrecto:
# resultado = 10 / 0

# ‚úÖ Correcci√≥n:
resultado = 10 / 2
print("Resultado:", resultado)


# ----------------------------------------------------
# 10. ERROR DE ENTRADA (InputError ‚Üí en realidad ValueError)
# ----------------------------------------------------
# Cuando pedimos input y no validamos el tipo.

# ‚ùå Ejemplo incorrecto:
# numero = int(input("Ingres√° un n√∫mero: "))  # Si escribo "hola" ‚Üí ValueError

# ‚úÖ Correcci√≥n:
# try:
#     numero = int(input("Ingres√° un n√∫mero: "))
#     print("N√∫mero ingresado:", numero)
# except ValueError:
#     print("‚ö† Deb√©s ingresar un n√∫mero v√°lido")


# ----------------------------------------
# CONCLUSI√ìN
# ----------------------------------------
# Los errores son parte natural del aprendizaje en Python.
# Lo importante es:
# - Leer bien el mensaje de error
# - Identificar la causa
# - Corregir el c√≥digo seg√∫n el tipo de error
# 
# En esta clase vimos:
# - SyntaxError
# - NameError
# - TypeError
# - IndentationError
# - IndexError
# - ValueError
# - AttributeError
# - ImportError
# - ZeroDivisionError
# - Errores con input()
